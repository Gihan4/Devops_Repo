import secrets  # module whenever a sequence should be cryptographically
import string  # provides string constants that we can use to define the alphabet

# let's generate random passwords !!!

letters = string.ascii_letters  # lowercase and uppercase letters.
digits = string.digits  # string containing the numbers 0 to 9
symbols = string.punctuation  # string of all special characters

pwd_length = 8

word_list = ["laptop", "banana", "mango", "blue", "basket"]


def pwd_level():
    level = input("what is the difficulty of password you would like? <junior> <senior> <pro> ")
    if level in "junior":
        return junior()
    elif level in "senior":
        return senior()
    elif level in "pro":
        return pro()
    else:
        print("invalid input")
        return ""


def junior():
    pwd = ""
    name = secrets.choice(word_list)  # takes a random name from the list
    for i in range(pwd_length):  # run 8 times
        # generate a random password in pwd_j
        pwd = pwd + "".join(secrets.choice(name))
    return pwd


def senior():
    pwd = ""
    blend = letters + digits
    for i in range(pwd_length):  # run 8 times
        # generate a random password in pwd_j
        pwd = pwd + "".join(secrets.choice(blend))
    return pwd


def pro():
    all_ = letters + digits + symbols
    pwd = ""
    for i in range(pwd_length):  # run 8 times
        # generate a random password from ALL in pwd
        pwd = pwd + "".join(secrets.choice(all_))
    return pwd


print(pwd_level())
